"""
模块：
    一个以.py为结尾的文件就是一个python模块
包：
    一个包含__init__.py的文件夹，被称为一个包；包里会包含多个模块
导入关键字：
 from    import
模块导入：
    import 模块名
    引入的文件中可以直接使用导入的模块中定义的变量和方法
    自定义的模块在导入的时候，建议从项目的根目录一级一级往下导入
    from py35_09day.demo_7package import musen  -->from包导入模块
包导入：
    导入后，我们直接点击这个包会直接跳进这个包的__init__.py（如果是模块，就是直接进入这个模块文件）

注意：在进行模块或者包导入的时候，第一次导入时，会将该模块的代码从上到下都执行一遍（如下例子）
     如果不希望调试代码被执行可以：
if __name__ =='__main__':
    只有这个条件成立，才会执行以下代码，而这个条件什么场景会成立呢？在直接运行该文件的时候，这个文件下的这条件才会成立。
    如果导入这个文件，导入时，就不会再执行这个条件判断下的调试代码

扩展：
包导入的查找路径：
    sys模块  .path : 可以直到导入时，python会以此从哪些路径去找
"""
# -------------------导入包后的错误和正确使用：--------------------------
from testproject_01.demo_01 import pack01

# 上面导入了一个包，但是没有导入对应模块，默认调用跳转至包下的init文件，使用init文件的内容
# 这一步 从这个包里直接使用test001文件中的参数name，会报错
print(pack01.test001.name)
# 如果想要只导入包，依然可以用包中的内容，就需要在__init__文件中去定义
print(pack01.name)
# 正确导入：
from testproject_01.demo_01.pack01 import test001

print(test001.name)
# ------------------导入模块----------------------
import random

print(random.randint(1, 5))

# ----------------导入后所有代码执行一次-------------------

from testproject_01.demo_01.pack01 import test001
test001.func(5)

# ----------------sys模块-----------------------------
import sys
# 包导入时，查找的路径
for i in sys.path:
    print(i)